var ProductFilteredListApp = angular.module('ProductFilteredListApp', ['ui.bootstrap', 'ngSanitize']);

ProductFilteredListApp.config(function($locationProvider) {

     $locationProvider.html5Mode({
       enabled:  !!(window.history && history.pushState),
       requireBase: false
    });
});

ProductFilteredListApp.controller('ProductFilteredListCtrl', function($scope, $sce, $http, $location, $rootScope, $timeout, $anchorScroll, $window) {

    $scope.stringToUrl = function(str) {

        if(typeof(str) === 'undefined')
            return '';

        var defaultDiacriticsRemovalMap = [
            {'base':'A', 'letters':/[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g},
            {'base':'AA','letters':/[\uA732]/g},
            {'base':'AE','letters':/[\u00C6\u01FC\u01E2]/g},
            {'base':'AO','letters':/[\uA734]/g},
            {'base':'AU','letters':/[\uA736]/g},
            {'base':'AV','letters':/[\uA738\uA73A]/g},
            {'base':'AY','letters':/[\uA73C]/g},
            {'base':'B', 'letters':/[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181\u0412]/g},
            {'base':'C', 'letters':/[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g},
            {'base':'D', 'letters':/[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g},
            {'base':'DZ','letters':/[\u01F1\u01C4]/g},
            {'base':'Dz','letters':/[\u01F2\u01C5]/g},
            {'base':'E', 'letters':/[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g},
            {'base':'F', 'letters':/[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g},
            {'base':'G', 'letters':/[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E\u0413]/g},
            {'base':'H', 'letters':/[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g},
            {'base':'I', 'letters':/[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197\u0418]/g},
            {'base':'J', 'letters':/[\u004A\u24BF\uFF2A\u0134\u0248]/g},
            {'base':'K', 'letters':/[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2\u041A]/g},
            {'base':'L', 'letters':/[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780\u041B]/g},
            {'base':'LJ','letters':/[\u01C7]/g},
            {'base':'Lj','letters':/[\u01C8]/g},
            {'base':'M', 'letters':/[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g},
            {'base':'N', 'letters':/[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g},
            {'base':'NJ','letters':/[\u01CA]/g},
            {'base':'Nj','letters':/[\u01CB]/g},
            {'base':'O', 'letters':/[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g},
            {'base':'OI','letters':/[\u01A2]/g},
            {'base':'OO','letters':/[\uA74E]/g},
            {'base':'OU','letters':/[\u0222]/g},
            {'base':'P', 'letters':/[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g},
            {'base':'Q', 'letters':/[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g},
            {'base':'R', 'letters':/[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782\u0420]/g},
            {'base':'S', 'letters':/[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784\u0428]/g},
            {'base':'T', 'letters':/[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g},
            {'base':'TZ','letters':/[\uA728]/g},
            {'base':'U', 'letters':/[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g},
            {'base':'V', 'letters':/[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g},
            {'base':'VY','letters':/[\uA760]/g},
            {'base':'W', 'letters':/[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g},
            {'base':'X', 'letters':/[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g},
            {'base':'Y', 'letters':/[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE\u0423]/g},
            {'base':'Z', 'letters':/[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762\u0417]/g},
            {'base':'a', 'letters':/[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g},
            {'base':'aa','letters':/[\uA733]/g},
            {'base':'ae','letters':/[\u00E6\u01FD\u01E3]/g},
            {'base':'ao','letters':/[\uA735]/g},
            {'base':'au','letters':/[\uA737]/g},
            {'base':'av','letters':/[\uA739\uA73B]/g},
            {'base':'ay','letters':/[\uA73D]/g},
            {'base':'b', 'letters':/[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253\u0411]/g},
            {'base':'c', 'letters':/[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g},
            {'base':'d', 'letters':/[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g},
            {'base':'dz','letters':/[\u01F3\u01C6]/g},
            {'base':'e', 'letters':/[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g},
            {'base':'f', 'letters':/[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g},
            {'base':'g', 'letters':/[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F\u0433]/g},
            {'base':'h', 'letters':/[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g},
            {'base':'hv','letters':/[\u0195]/g},
            {'base':'i', 'letters':/[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131\u0438]/g},
            {'base':'j', 'letters':/[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g},
            {'base':'k', 'letters':/[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3\u043A]/g},
            {'base':'l', 'letters':/[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747\u043B]/g},
            {'base':'lj','letters':/[\u01C9]/g},
            {'base':'m', 'letters':/[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g},
            {'base':'n', 'letters':/[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g},
            {'base':'nj','letters':/[\u01CC]/g},
            {'base':'o', 'letters':/[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g},
            {'base':'oi','letters':/[\u01A3]/g},
            {'base':'ou','letters':/[\u0223]/g},
            {'base':'oo','letters':/[\uA74F]/g},
            {'base':'p','letters':/[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g},
            {'base':'q','letters':/[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g},
            {'base':'r','letters':/[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783\u0440]/g},
            {'base':'s','letters':/[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B\u0448]/g},
            {'base':'t','letters':/[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g},
            {'base':'tz','letters':/[\uA729]/g},
            {'base':'u','letters':/[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289\u0443]/g},
            {'base':'v','letters':/[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g},
            {'base':'vy','letters':/[\uA761]/g},
            {'base':'w','letters':/[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g},
            {'base':'x','letters':/[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g},
            {'base':'y','letters':/[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g},
            {'base':'z','letters':/[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763\u0437]/g}
        ];

        for(var i = 0; i < defaultDiacriticsRemovalMap.length; i++) {
            str = str.replace(defaultDiacriticsRemovalMap[i].letters, defaultDiacriticsRemovalMap[i].base);
        }

        return encodeURI(str
            .toLowerCase() // wszystko z małych
            .replace(/[^a-zA-Z0-9\s\-\_\.\|]+/g, '') // usuń pozostałe znaki inne niż litery, liczby, myślnik i podkreślenie
            .replace(/ +(?= )/g, '') // zamień spacje występujące obok siebie więcej niż jeden raz na pusty znak
            .replace(/ /g, '_') // zamień spacje na podkreślenia;
        );

    };

    $scope.isViewLoading = true;
    $scope.errorLoading = false;
    $scope.requestInProgress = true;

    $scope.paginatorSize = 7;

    $scope.order_types = [];



    $scope.results = [
        {
            key: 60,
            name: '60'
        },
        {
            key: 180,
            name: '180'
        }
    ];

    $scope.urlParamTypes = {
        p: {
            dataPath: 'page',
            dataList: '',
            dataListIdField: '',
            dataListSecondDimension: '',
            dataListDescriptionField: '',
            dataRemovable: false,
            dataType: 'simple'
        },
        r: {
            dataPath: 'results',
            dataList: '',
            dataListIdField: '',
            dataListSecondDimension: '',
            dataListDescriptionField: '',
            dataRemovable: false,
            dataType: 'simple'
        },
        o: {
            dataPath: 'order',
            dataList: '',
            dataListIdField: '',
            dataListSecondDimension: '',
            dataListDescriptionField: '',
            dataRemovable: false,
            dataType: 'simple'
        },
        q: {
            dataPath: 'search',
            dataList: '',
            dataListIdField: '',
            dataListSecondDimension: '',
            dataListDescriptionField: '',
            dataRemovable: true,
            dataType: 'simple'
        },
        k: {
            dataPath: 'filters.gender_categories.checked_value',
            dataList: '',
            dataListIdField: '',
            dataListSecondDimension: '',
            dataListDescriptionField: '',
            dataRemovable: true,
            dataType: 'simple'
        },
        s: {
            dataPath: 'filters.subcategories.checked_values_list',
            dataList: 'http://answear.ua/scripts/angular_controllers/filters.subcategories.list',
            dataListIdField: 'category_child_id',
            dataListSecondDimension: '',
            dataListDescriptionField: 'category_child_name',
            dataRemovable: true,
            dataType: 'single_dimension'
        },
        t: {
            dataPath: 'filters.activities.checked_values_list',
            dataList: 'http://answear.ua/scripts/angular_controllers/filters.activities.list',
            dataListIdField: 'category_child_id',
            dataListSecondDimension: '',
            dataListDescriptionField: 'category_child_name',
            dataRemovable: true,
            dataType: 'single_dimension'
        },
        b: {
            dataPath: 'filters.brands.checked_values_list',
            dataList: 'http://answear.ua/scripts/angular_controllers/filters.brands.list',
            dataListIdField: 'brand_id',
            dataListSecondDimension: '',
            dataListDescriptionField: 'brand_name',
            dataRemovable: true,
            dataType: 'single_dimension'
        },
        a: {
            dataPath: 'filters.attributes.checked_values_list',
            dataList: 'http://answear.ua/scripts/angular_controllers/filters.attributes.list',
            dataListIdField: 'attribute_value_id',
            dataListSecondDimension: 'attribute_values',
            dataListDescriptionField: 'attribute_value_name',
            dataRemovable: true,
            dataType: 'double_dimension'
        },
        c: {
            dataPath: 'filters.prices.checked_values_list',
            dataList: '',
            dataListIdField: '',
            dataListSecondDimension: '',
            dataListDescriptionField: '',
            dataRemovable: true,
            dataType: 'simple'
        },
        v: {
            dataPath: 'filters.variation_parameters.checked_values_list',
            dataList: 'http://answear.ua/scripts/angular_controllers/filters.variation_parameters.list',
            dataListIdField: 'id',
            dataListSecondDimension: '',
            dataListDescriptionField: 'name',
            dataRemovable: true,
            dataType: 'single_dimension'
        },
        d: {
            dataPath: 'filters.discount_parameters.checked_values_list',
            dataList: 'http://answear.ua/scripts/angular_controllers/filters.discount_parameters.list',
            dataListIdField: 'id',
            dataListSecondDimension: '',
            dataListDescriptionField: 'name',
            dataRemovable: true,
            dataType: 'single_dimension'
        },
        sale : {
            dataPath: 'sale',
            dataList: '',
            dataListIdField: '',
            dataListSecondDimension: '',
            dataListDescriptionField: '',
            dataRemovable: true,
            dataType: 'simple'
        },
        premium: {
            dataPath: 'premium',
            dataList: '',
            dataListSecondDimension: '',
            dataListDescriptionField: '',
            dataRemovable: true,
            dataType: 'simple'

        },
        f: {
            dataPath: 'filters.features.checked_values_list',
            dataList: 'http://answear.ua/scripts/angular_controllers/filters.features.list',
            dataListIdField: 'feature_id',
            dataListSecondDimension: '',
            dataListDescriptionField: 'feature_name',
            dataRemovable: true,
            dataType: 'single_dimension'
        },

    };

    $scope.descriptionParams = [];

    $scope.labelVisible = [];

    $scope.priceRange;
    $scope.search = '';

    $scope.baseUrl;
    $scope.baseDescription;

    $scope.sale = false;

    var LANG = 'pl';

    $scope.allowedLanguages = ['pl'];
    $scope.defaultLanguage = 'pl'
    $scope.lang = $scope.allowedLanguages.indexOf(LANG) != -1 ? LANG : $scope.defaultLanguage;

    $scope.allowedUrlPath = ['p'];
    $scope.defaultUrlPath = 'p';

    $scope.brandQueryValue  = "";
    
    $scope.twengaLoaded = false;


    /**
     * Wyszukiwanie wartości w obiekcie na podstawie zadanej ścieżki
     */
    $scope.deepFind = function(obj, path) {


        var paths = path.split('.'),
            current = obj,
            i;

        for(i = 0; i < paths.length; ++i) {
            if(typeof(current[paths[i]]) == 'undefined')
                return undefined;
            else
                current = current[paths[i]];
        }
        return current;
    };

    $scope.removeDescriptions = function(type) {
        $scope.descriptionParams[type] = [];
    };

    $scope.updateDescription = function(type, value) {
        if(typeof($scope.descriptionParams[type]) == 'undefined')
            $scope.descriptionParams[type] = [];

        if($scope.descriptionParams[type].indexOf(value.toString()) == -1)
            $scope.descriptionParams[type].push(value.toString());
    };

    $scope.countFilterValues = function(values) {

        if(typeof(values) === 'object')
            return Object.keys(values).length;

        return 0;
    };

    $scope.countActiveFilterValues = function(values, type) {

        if(typeof(values) === 'object') {
            var cnt = 0;
            angular.forEach(values, function(val){

                if(type === 's') {
                    currElement = val.category_child_id;
                } else {
                    currElement = val.attribute_value_id;
                }

                if($scope.isFilterChecked(type, currElement)) {
                   cnt++;
                }
            });
            return cnt;
            //return Object.keys(values).length;
        }
        return 0;
    };


    /**
     * Dodawanie opisów do URL'a
     */
    $scope.getUrlDescription = function() {
        var description = $scope.baseDescription,
            dataList;

        for(var type in $scope.urlParamTypes) {
            if(
                typeof($scope.descriptionParams[type]) !== 'undefined' &&
                $scope.urlParamTypes[type].dataList != '' &&
                $scope.urlParamTypes[type].dataListDescriptionField != '' &&
                $scope.urlParamTypes[type].dataListIdField != ''
            ) {
                for(var value in $scope.descriptionParams[type]) {
                    value = $scope.descriptionParams[type][value];
                    dataList = $scope.deepFind($scope.data, $scope.urlParamTypes[type].dataList);

                    for(var typeObj in dataList) {
                        if(
                            typeof(dataList[typeObj][$scope.urlParamTypes[type].dataListIdField]) !== 'undefined' &&
                            dataList[typeObj][$scope.urlParamTypes[type].dataListIdField] == value &&
                            typeof(dataList[typeObj][$scope.urlParamTypes[type].dataListDescriptionField]) !== 'undefined'
                        ) {
                            description += (description == '' ? '' : ',') + $scope.stringToUrl(dataList[typeObj][$scope.urlParamTypes[type].dataListDescriptionField]).replace(/\_\d+$/gi, '');
                        } else if(
                            $scope.urlParamTypes[type].dataListSecondDimension != '' &&
                            dataList[typeObj][$scope.urlParamTypes[type].dataListSecondDimension] !== 'undefined'
                        ) {
                            for(var v in dataList[typeObj][$scope.urlParamTypes[type].dataListSecondDimension]) {
                                if(dataList[typeObj][$scope.urlParamTypes[type].dataListSecondDimension][v][$scope.urlParamTypes[type].dataListIdField] == value)
                                    description += (description == '' ? '' : ',') + $scope.stringToUrl(dataList[typeObj][$scope.urlParamTypes[type].dataListSecondDimension][v][$scope.urlParamTypes[type].dataListDescriptionField]).replace(/\_\d+$/gi, '');
                            }
                        }
                    }

                }
            }
        }

        return description;
    };

    $scope.resetPage = true;

    /**
     * Generowanie URL'a
     */
    $scope.changeUrl = function(paramType, paramValue, paramId, forceChange, nonRemovableOnly, returnUrl) {

        if(typeof(forceChange) == 'undefined')
            forceChange = false;

        if(typeof(nonRemovableOnly) == 'undefined')
            nonRemovableOnly = false;

        if(typeof(returnUrl) == 'undefined')
            returnUrl = false;



        var url = '',
            urlPart,
            data,
            dataList,
            usedParams,
            descriptionValues;


        for(var type in $scope.urlParamTypes) {
            $scope.removeDescriptions(type);


            if(!nonRemovableOnly || (nonRemovableOnly && !$scope.urlParamTypes[type].dataRemovable)) {
                data = $scope.deepFind($scope.data, $scope.urlParamTypes[type].dataPath);
                dataList = $scope.deepFind($scope.data, $scope.urlParamTypes[type].dataList);
                descriptionValues = [];



                if($scope.urlParamTypes[type].dataType == 'simple') {

                    /**
                     * Obsługa parametru po kliknięciu
                     */
                    if(paramType == type)
                        data = paramValue;


                    /**
                     * "Simple"
                     * np. p-4 bez możliwości wielu wartości po przecinkach
                     */
                    if(
                        (typeof(data) == 'string' || typeof(data) == 'number') &&
                        (data.length > 0 || data > 0)
                    ) {
                        if(type == 'q') {
                            if($location.path().indexOf('q-') == -1) //doklejamy q- tylko, jeśli już nie ma.
                            url += '/' + type + '-' + encodeURIComponent(data);
                        } else {
                            url += '/' + type + '-' + data;
                        }

                    }

                } else if(typeof(data) == 'object') {

                    if($scope.urlParamTypes[type].dataType == 'single_dimension') {
                        urlPart = '';
                        descriptionValues = [];

                        for(var value in data) {

                            /**
                             * Nie dodajemy tej samej wartości drugi raz
                             */
                            if(paramValue != value || paramType != type) {

                                /**
                                 * "Single dimension"
                                 * np. b-4 lub b-4,5,2,...
                                 */
                                urlPart += (urlPart == '' ? '' : ',') + value;
                            }
                        }

                        /**
                         * Obsługa parametru po kliknięciu
                         */
                        if(
                            paramType == type &&
                            (typeof(paramValue) == 'string' || typeof(paramValue) == 'number') &&
                            (paramValue.length > 0 || paramValue > 0) &&
                            !(paramValue in data)
                        ) {
                            /**
                             * Dodanie wartości do URL'a
                             */
                            urlPart += (urlPart == '' ? '' : ',') + paramValue;
                        }

                        if(urlPart != '') {
                            url += '/' + type + '-' + urlPart;

                            /**
                             * Dodanie opisów do URL'a
                             */
                            for(var v in urlPart.split(',')) {
                                descriptionValues.push(urlPart.split(',')[v]);
                            }
                        }

                    } else if($scope.urlParamTypes[type].dataType == 'double_dimension') {
                        urlPart = '';
                        usedParams = [];

                        for(var value in data) {

                            /**
                             * "Double dimension"
                             * np. a-8-5 lub a-8-4,2,7,...
                             */
                            var urlPartTmp = '/' + type + '-' + value + '-' + data[value].toString();

                            usedParams.push(value.toString());

                            for(var v in data[value]) {
                                descriptionValues.push(data[value][v]);
                            }

                            /**
                             * Obsługa parametru po kliknięciu - dla istniejących w URL'u
                             */
                            if(
                                paramId == value && paramType == type &&
                                (typeof(paramId) == 'string' || typeof(paramId) == 'number') &&
                                (typeof(paramValue) == 'string' || typeof(paramValue) == 'number') &&
                                (paramValue.length > 0 || paramValue > 0)
                            ) {
                                if(data[value].indexOf(paramValue.toString()) == -1) {

                                    /**
                                     * Dodane wartości do URL'a
                                     */
                                    urlPartTmp += ',' + paramValue;

                                    /**
                                     * Dodanie opisów do URL'a
                                     */
                                    descriptionValues.push(paramValue);
                                } else {

                                    /**
                                     * Usunięcie wartości z URL'a
                                     */
                                    data[value].splice(data[value].indexOf(paramValue.toString()), 1);

                                    /**
                                     * Usunięcie opisu z URL'a
                                     */
                                    descriptionValues.splice(descriptionValues.indexOf(paramValue), 1);

                                    if(data[value].length > 0) {
                                        urlPartTmp = '/' + type + '-' + value + '-' + data[value].toString();

                                        /**
                                         * Dodanie opisów do URL'a
                                         */
                                        for(var v in data[value]) {
                                            descriptionValues.push(data[value][v]);
                                        }
                                    } else
                                        urlPartTmp = '';
                                }
                            }
                            urlPart += urlPartTmp;
                        }
                        if(urlPart != '')
                            url += urlPart;

                        /**
                         * Obsługa parametru po kliknięciu - dla nowych, nieistniejących w URL'u
                         */
                        if(
                            (typeof(paramId) == 'string' || typeof(paramId) == 'number') &&
                            (typeof(paramValue) == 'string' || typeof(paramValue) == 'number') &&
                            (usedParams.indexOf(paramId.toString()) == -1) &&
                            (paramValue.length > 0 || paramValue > 0)
                        ) {
                            url += '/' + type + '-' + paramId + '-' + paramValue;

                            descriptionValues.push(paramValue);
                        }

                    }

                }

                for(var v in descriptionValues) {
                    $scope.updateDescription(type, descriptionValues[v]);
                }
            }
        }

        if(typeof(paramType) != 'undefined' && paramType != 'p' && $scope.resetPage && parseInt($scope.data.page) != 1) {
            url = url.replace(/\/p-\d*\//gi, '/p-1/');
        }


        var description = $scope.getUrlDescription();
        if(typeof(description) === 'undefined') {
            url = $scope.baseUrl + url;
        } else {
            url = $scope.baseUrl + (description == '' ? '' : '/') + description + url;
        }


        if(returnUrl)
            return url;

        if($location.path() != url) {
            /*console.log('Change: ' + paramType + ' = ' + paramValue);
            console.log('Old URL: ' + $location.path());
            console.log('New URL: ' + url);*/
        }
        if(!$scope.requestInProgress || forceChange)
            $location.path(url);
       /* else
            console.log('Request in progress!');*/
    };

    $scope.removeFromUrl = function(params, url) {
        for(var p in params) {
            var type = params[p];
            if($scope.urlParamTypes[type]){
                var pramVal = $scope.deepFind($scope.data, $scope.urlParamTypes[type].dataPath);
                if($scope.urlParamTypes[type].dataType == 'simple') {
                    if(
                        (typeof(pramVal) == 'string' || typeof(pramVal) == 'number') &&
                        (pramVal.length > 0 || pramVal > 0)
                    ) {
                        var re = new RegExp('/' + type + '-' + pramVal,"gi");
                        url = url.replace(re, '');
                    }
                }else{
                    //todo
                }
            }
        }
        return url;
    }

    /**
     * Pobranie podstawowego URL'a
     */
    $scope.getBaseUrl = function() {
        return $scope.changeUrl('p', 1, false, true, true, true);
    };

    $scope.getCategoryUrl = function(categoryId, categoryName) {
        return $scope.baseUrlPath + $scope.stringToUrl(categoryName).replace(/\_\d+$/gi, '') + '-' + categoryId + '-k.html';
    };

    $scope.getGenderCategoryUrl = function(categoryId, categoryName) {
        if($scope.isFilterChecked('premium', 1)) {
            return $scope.changeUrl('p', 1, false, true, true, true).replace(/\/k\-\d+$/gi, '') + '/k-' + categoryId + '/premium-1';
        }


        return $scope.changeUrl('p', 1, false, true, true, true).replace(/\/k\-\d+$/gi, '') + '/k-' + categoryId;

    };

    $scope.getNextPageUrl = function(totalPages) {

        if($scope.data.page < totalPages){
            return $scope.changeUrl('p', $scope.data.page + 1, false, false, false, true);
        }
    };

    $scope.getPrevPageUrl = function() {
        if($scope.data.page > 1){
            return $scope.changeUrl('p', $scope.data.page - 1, false, false, false, true);
        }
    };

    $scope.getCanonicalUrl = function() {
        var url = $location.url()
        return $scope.removeFromUrl(['r','o','c'],url);
    }

    $scope.changePage = function(page) {

//      alert('test');
        if(!page || isNaN(page)) {
            page = $scope.data.page;
        }

        if(page > $scope.data.total_pages) {
            page = $scope.data.total_pages;
        }

        if(page <= 0) {
            page = 1;
        }

        $('.paginationInput').val(page);
        $scope.changeUrl('p', page);

    };

    $scope.setPage = function(page) {
        $scope.changeUrl('p', page);
    };

    $scope.getSpecificPageUrl = function(newpage) {
        if($location.path().match(/\/p-\d*\//gi) !== null)
            return $location.path().replace(/\/p-\d*\//gi, '/p-'+newpage+'/');
        else return $location.path()+'/p-'+newpage+'/';
    };

    /**
     * Obserwator:
     * Numer strony
     */
    $scope.$watch('http://answear.ua/scripts/angular_controllers/data.page', function(newValue, oldValue) {
        if(typeof(newValue) != 'undefined' && typeof(oldValue) != 'undefined' && newValue != oldValue)
            $scope.changeUrl('p', newValue);
    });

    /**
     * Obserwator:
     * Ilość wyników na stronę
     */
    $scope.$watch('data.results', function(newValue, oldValue) {
        if(typeof(newValue) != 'undefined' && typeof(oldValue) != 'undefined' && newValue != oldValue)
            $scope.changeUrl('r', newValue);
    });

    /**
     * Obserwator:
     * Sortowanie
     */
    $scope.$watch('data.order', function(newValue, oldValue) {
        if(typeof(newValue) != 'undefined' && typeof(oldValue) != 'undefined' && newValue != oldValue) {
            $scope.changeUrl('o', newValue);}
    });

    /**
     * Obserwator:
     * Przedział cenowy
     */
    $scope.$watch('priceRange', function(newValue, oldValue) {
        if(typeof(newValue) != 'undefined')
            $scope.changeUrl('c', newValue);
    });

    $scope.searchQuery = function(value) {
        $timeout.cancel($scope.textSearchTimeout);

        $scope.textSearchTimeout = $timeout(function() {
            if(value.length >= 3) {
                $('.es-full-text-search div.es-filter-input').addClass('es-show-loading');
                $scope.changeUrl('q', value);
            }
            if(value.length == 0) {
                $('.es-full-text-search div.es-filter-input').addClass('es-show-loading');
                $scope.changeUrl('q', null);
            }
        }, 600);
    };

    $scope.allTrackingCodes = function() {
        var catname = '';
        if(typeof  $scope.data.pseudo_category !== 'undefined' &&   $scope.data.pseudo_category.length) {
            catname = $scope.data.pseudo_category;
        } else if($scope.data.filter_type === 'brand') {
            catname = $scope.data.breadcrumbs.brand_name;
        } else {
            catname = $scope.data.category_name;
        }
		
		var customerId = hashedEmail = '';
		if($scope.data.loggedIn) {
		    if($scope.data.loggedInUser)
		    	customerId = $scope.data.loggedInUser;
		
		    if($scope.data.loggedHashedEmail)
		    	hashedEmail = $scope.data.loggedHashedEmail;
		}

        //zanox
          var zx_category = catname;

         window._zx = window._zx || [];
                        window._zx.push({"id":"5F0450AD44966B6C7FCE"});
                        (function(d) {
                                var s = d.createElement("script"); s.async = true;
                                s.src = (d.location.protocol == "https:" ? "https:" : "http:") + "//static.zanox.com/scripts/zanox.js";
                                var a = d.getElementsByTagName("script")[0]; a.parentNode.insertBefore(s, a);
                        }(document));

        //tradedoubler
        var TDProducts = [];
            angular.forEach($scope.data.list, function(value){
                var x = {'id':value.product_id,'price':value.price_regular,'currency':'PLN','name':value.display_name};
                TDProducts.push(x);
            });


        var TDConf = TDConf || {};
        window.TDConf = TDConf;
            window.TDConf.Config = {
            products:TDProducts,
            containerTagId : "3548"
        };

        if(typeof (window.TDConf) !== "undefined"){
            window.TDConf.sudomain = ("https:" === document.location.protocol) ? "swrap" : "wrap";
            window.TDConf.host = ".tradedoubler.com/wrap";
            window.TDConf.containerTagURL = (("https:" === document.location.protocol) ? "https://" : "http://")  + TDConf.sudomain + TDConf.host;

            if (typeof (window.TDConf.Config) !== "undefined") {
                (function(d) {
                    var s = d.createElement("script"); s.async = true;
                    s.src = unescape(window.TDConf.containerTagURL  + "?id="+ window.TDConf.Config.containerTagId);;
                    var a = d.getElementsByTagName("script")[0]; a.parentNode.insertBefore(s, a);
                }(document));
            }
        }

        //twenga        
        if(!$scope.twengaLoaded) {//dane ladujemy tylko raz
            $scope.twengaLoaded = true;

            var twengaContent = $('html body div[id=twcm_main]');
            
            var twengaCategory = $('.twcm_category_name');
            if(twengaCategory.length > 0 && twengaCategory.html().length) {
                twengaCategory.html(catname);
            }
            
            angular.forEach($scope.data.list, function(value){
                var twcmItem = '<div class="twcm_item">';
                twcmItem += '<div class="twcm_item_id">'+value.variation_id+'</div>';
                twcmItem += '<div class="twcm_item_name">'+value.display_name+'</div>'; 
                if(value.price_sale>0) {
                    twcmItem += '<div class="twcm_item_price_et">'+value.price_sale+'</div>';
                } else {
                    twcmItem += '<div class="twcm_item_price_et">'+value.price_regular+'</div>';
                }
                 
                twcmItem += '</div>';
                twengaContent.append(twcmItem);
            });
        }
        
        //salesdoubler
        (function (js) {
        var scr = document.createElement('script');
        scr.setAttribute("src", js + "?ts=" + (new Date().getTime()));
        scr.setAttribute("async", true);
        document.getElementsByTagName("head")[0].appendChild(scr);
        }("spx.js"/*tpa=http://www.dmpcloud.net/spx/answear.com/spx.js*/));
    };

    $scope.initSeo = function() {

        $('html head title').html($scope.data.meta_title);
        $('html head meta[name=description]').attr('content', $scope.data.meta_description);
        $('html head meta[name=keywords]').attr('content', $scope.data.meta_keywords);
        
        $('html head meta[property="og:title"]').attr('content', $scope.data.meta_title);
        $('html head meta[property="og:description"]').attr('content', $scope.data.meta_description);
        
        var setHeadLink = function(rel, url){  
            var link = $('html head link[rel=' + rel + ']');

            if(typeof(url) != 'undefined' && url.length){
                if(!url.match(/^http/g)){
                    url = location.protocol+'//'+location.hostname + url;
                }
                if(link.length){
                    link.attr('href', url);
                }else{
                    $('html head').append('<link rel="' + rel + '" href="'+ url +'">');
                }
            }else if(link.length){
                link.remove();
            }
        }
        setHeadLink('canonical', $scope.getCanonicalUrl());
        setHeadLink('next', $scope.getNextPageUrl($scope.data.total_pages));
        setHeadLink('prev', $scope.getPrevPageUrl());
        
    };
    
    $scope.initGTM = function() {

        dataLayer = dataLayer || [];
        if($scope.data.loggedIn === 1)  var dl = {"http://answear.ua/scripts/angular_controllers/user.Type":"logged in","http://answear.ua/scripts/angular_controllers/user.ID":$scope.data.loggedInUser, "http://answear.ua/scripts/angular_controllers/page.Type":"category3"};
        else  var dl = {"http://answear.ua/scripts/angular_controllers/user.Type":"not logged in","http://answear.ua/scripts/angular_controllers/page.Type":"category3"};
        var catGA = {};
        angular.forEach($scope.data.breadcrumbs, function(v,k) {
        	if($scope.data.breadcrumbs.brand_id) {
	        	if(k == 'brand_name') {
	        		catGA[1] = v;
	        	}
        	} else {
        		catGA[k+1] = v.category_name;
        	}
        });

        if($scope.anyFilterChecked()) {
            angular.forEach($scope.data.filters.attributes.list, function(a,k){
                angular.forEach(a.attribute_values, function(av,k) {
                    if($scope.isFilterChecked('a',av.attribute_value_id)) {
                        if(a.attribute_name == 'Color_Frontend') {
                            if (typeof(dl['filter.Colors']) == 'undefined') dl['filter.Colors'] = [av.attribute_value_name];
                            else dl['filter.Colors'].push(av.attribute_value_name);
                        }
                        else if(a.attribute_name == 'Size') {
                            if (typeof(dl['filter.Sizes']) == 'undefined') dl['filter.Sizes'] = [av.attribute_value_name];
                            else dl['filter.Sizes'].push(av.attribute_value_name);
                        }
                        else {
                            if (typeof(dl['filter.feature']) == 'undefined') dl['filter.feature'] = [av.attribute_value_name];
                            else dl['filter.feature'].push(av.attribute_value_name);

                        }

                    }
                });

            });

            angular.forEach($scope.data.filters.subcategories.list, function(sc,k){
                if($scope.isFilterChecked('s', sc.category_child_id)) {

                    if (typeof(dl['filter.Categories4']) == 'undefined') dl['filter.Categories4'] = [sc.category_child_name];
                    else dl['filter.Categories4'].push(sc.category_child_name);
                }
            });

        }

        angular.forEach(catGA, function(v,k) {
            dl['page.Category.'+k]=v;
        });
        
        var products = [];
        angular.forEach($scope.data.list, function(value){
            var size = null;
            angular.forEach(value.grouped_variations, function(gvalue){
                if(gvalue.variation_id == value.variation_id) {
                    size = gvalue.attributes[0].attribute_value_display_name
                }
            });

            var price = value.price_regular;
            if(value.price_sale > 0) {
                price = value.price_sale;
            }

            products.push({
                'http://answear.ua/scripts/angular_controllers/product.Id' : value.variation_id,
                'http://answear.ua/scripts/angular_controllers/product.Name' : value.display_name,
                'product.Brand' : value.brand_name,
                'product.Price' : price,
                'http://answear.ua/scripts/angular_controllers/product.Size' : size,
                'product.defvariantID' : value.def_variation_id,
                'product.modelID' : value.product_id,
                'http://answear.ua/scripts/angular_controllers/product.ean' : value.ean,
                'product.pbbID' : value.product_code,
                'product.frontendID' : value.product_code_fe,
                'product.color' : value.color_name,
                'product.colorcode' : value.color_symbol
            });
        });       
        
        if(products.length) {
           angular.extend(dl, {'products' : products});
        }
        dataLayer.push(dl);
    };
    
    
    /**
     * Obserwator:
     * Przedział cenowy
     */
    $scope.initPriceSlider = function() {
        var selectedPrices = $scope.deepFind($scope.data, $scope.urlParamTypes['c'].dataPath);

        if(selectedPrices.length <= 0)
            selectedPrices = $scope.data.filters.prices.list[0] + ',' + $scope.data.filters.prices.list[1];


        ;
        var esSlider = $('#priceRange');

        $(esSlider).slider({
            range: true,
            min: 0,//$scope.data.filters.prices.list[0],
            max: $scope.data.filters.prices.list[1],
            values: selectedPrices.split(','),
            step: 1,
            slide: function(event, ui) {
                esSlider.attr('data-set-min', ui.values[0]);
                esSlider.attr('data-set-max', ui.values[1]);
                $('#priceInputs #inputMin').val(ui.values[0] + " " + $scope.data.currency);
                $('#priceInputs #inputMax').val(ui.values[1] + " " + $scope.data.currency);
            },
            stop: function(event, ui) {
                $scope.$apply(function() {
                    $scope.priceRange = ui.values.toString();
                });
            }
        });


        var setMin = $('#priceRange').slider('values', 0),
            setMax = $('#priceRange').slider('values', 1);

        esSlider.attr('data-set-min', setMin);
        esSlider.attr('data-set-max', setMax);
        $('#priceInputs #inputMin').val(setMin + " " + $scope.data.currency);
        $('#priceInputs #inputMax').val(setMax +  " " + $scope.data.currency);

        $('#esPriceInputFrom, #esPriceInputTo').keyup(function(e) {
            if (e.which == 13) {
                $(this).blur();
                $('#esPriceInputsWrap #esPriceInputBtn').trigger('click');
            }
        });

        $('#priceInputs #inputMin,#priceInputs #inputMax').on('focus', function() {
            $(this).val('');
        })

        $(document).on('click', '#priceInputs #inputBtn', function(e) {

            e.preventDefault();

            var inputMin = parseInt($('#priceInputs #inputMin').val()),
                    inputMax = parseInt($('#priceInputs #inputMax').val()),
                    newValue = [],
                    resetValue = [$scope.data.filters.prices.list[0], $scope.data.filters.prices.list[1]];

            function isPositiveInteger(val) {
                return val == '0' || ((val | 0) > 0 && val % 1 == 0);
            }

            if(isPositiveInteger(inputMin) && isPositiveInteger(inputMax)) {
                newValue = [inputMin, inputMax];
                if (inputMin >= inputMax || inputMin < 0 || inputMax < 0 || inputMin < $scope.data.filters.prices.list[0] || inputMax > $scope.data.filters.prices.list[1]) {
                    newValue = resetValue;
                    $('#priceInputs #inputMin').val($scope.data.filters.prices.list[0]);
                    $('#esPriceInputsWrap #esPriceInputTo').val($scope.data.filters.prices.list[1]);
                }
            } else {
                newValue = resetValue;
                $('#priceInputs #inputMin').val($scope.data.filters.prices.list[0]);
                $('#priceInputs #inputMax').val($scope.data.filters.prices.list[1]);
            }

            $(esSlider).slider('values', newValue);

            $scope.$apply(function() {
                $scope.priceRange = newValue.toString();
            });

        });

    };

    /**
     * Wykonywane przy ładowaniu listy filtrów:
     * Sprawdzanie zaznaczonych filtrów
     */
    $scope.isFilterChecked = function(filter_type, filter_value_id) {

       if(filter_type == 'sale') {
            if(typeof($scope.data) != 'undefined') {
                return  $scope.data.sale == '1' ? true : false
            }
           return false;
       }

        if(filter_type == 'premium') {
            if(typeof($scope.data) != 'undefined') {
                return  $scope.data.premium == '1' ? true : false
            }
            return false;
        }

        var data = $scope.deepFind($scope.data, $scope.urlParamTypes[filter_type].dataPath);

        if(typeof(data) == 'object') {
            for(var value in data) {
                for(var v in data[value])
                    if(data[value][v] == filter_value_id) {
                        $scope.labelVisible.push(filter_type);
                        return true;
                    }
            }
        }
        return false;
    };



    /**
     * Wykonywane przy kliknięciu na wartość filtru:
     * Zaznaczanie filtrów subkategorii, marek, atrybutów
     */
    $scope.checkFilter = function(filter_type, filter_value_id, filter_id) {



        if(typeof(filter_id) == 'undefined')

            $scope.changeUrl(filter_type, filter_value_id);
        else
            $scope.changeUrl(filter_type, filter_value_id, filter_id);
    };


    /**
     * resetuje filtr ceny
     */
    $scope.resetPrices = function() {
       $scope.changeUrl('c', "");
    }



    /**
     * Zaznaczanie aktywnej kategorii w menu...
     */
    $scope.markMenuItemSelected = function() {
        $('li.menu a').removeClass('selected');

        if($scope.data.filter_type == 'new') {

            /**
             * ... nowość
             */
            $('li.menu a[rel="news"]').addClass('selected');
        } else if($scope.data.filter_type == 'sale') {

            /**
             * ... nowość
             */
            $('li.menu a[rel="sale"]').addClass('selected');
        } else if($scope.data.filter_type == 'category') {

            /**
             * ... kategoria
             */
            if(typeof($scope.data.breadcrumbs[0]) != 'undefined' && typeof($scope.data.breadcrumbs[0].category_id) != 'undefined') {
                $('li.menu a[rel="' + $scope.data.breadcrumbs[0].category_id + '"]').addClass('selected');
            }
        } else if($scope.data.filter_type == 'brand') {

            /**
             * ... marka
             */
            if(typeof($scope.data.breadcrumbs.brand_id) != 'undefined') {
                $('li.menu a[rel="brands"]').addClass('selected');
            }
        }
    };

    $scope.hideBrand = function(brandId, categoryId) {
        $.cookie.json = true;

        var hiddenBrands = $.cookie('hiddenBrand');
        if(typeof(hiddenBrands) == 'undefined') {
            var brandIds = {'categoryId': categoryId, 'brandId': [brandId]};
            $.cookie('hiddenBrand', JSON.stringify(brandIds), {path: '/'});
        }else {
            hiddenBrands  = JSON.parse(hiddenBrands);
            if(-1 === hiddenBrands['brandId'].indexOf(brandId)) {
                hiddenBrands['brandId'].push(brandId);
            }
            $.cookie('hiddenBrand', JSON.stringify(hiddenBrands), {path: '/'});
        }
        $window.location.href = $location.path();
    };

    $scope.showBrands = function() {
         $.removeCookie('hiddenBrand',  { path: '/' });
         $window.location.href = $location.path();
    };

    $scope.isBrandHidden = function() {
        var hiddenBrands = $.cookie('hiddenBrand');
        if (typeof(hiddenBrands) == 'undefined') return false;
        return true;
    };


    $scope.pseudoCatForLoggedIn = function() {
       if(typeof($scope.data) !== 'undefined' &&  typeof($scope.data.pcategory) !== 'undefined') {

           var pcategory = $scope.data.pcategory;

           if(null == pcategory) return;

           return  pcategory.spc_for_loggedin == 1 && $scope.data.loggedIn == 0 ? true : false;

       }

        return false;

    }

    /**
     * Obserwartor:
     * Zmiana URL'a, wysyłanie zapytań do API
     */
    $rootScope.$on('$locationChangeStart', function(event, newUrl, oldUrl) {

        /**
         * Sprawdzanie, czy aktualny URL należy do URL'i z zakresu Angular'a
         * oraz generowanie linków do panelu zmiany języka
         */
        var isAngularUrl = false;

        var locationPath = $location.url() !== '' ? $location.path() : $window.location.pathname;
        if($location.hash() !== '') {
            locationPath = $location.hash();
        }

        for(var p in $scope.allowedUrlPath) {

            if(locationPath.search('/' + $scope.allowedUrlPath[p] + '/') == 0) {
                isAngularUrl = true;

                $scope.baseUrlPath = '/' + $scope.allowedUrlPath[p] + '/';
            }
        }

        /**
         * Wyjście poza stronę filtrów - pełne przeładowanie
         */
        if(!isAngularUrl) {
            /*console.log('External URL - redirecting: ' + locationPath);*/

            event.preventDefault();
            $window.location.href = decodeURIComponent($location.url());
        } else {

            $scope.loadingTimeout = $timeout(function() {
                $scope.isViewLoading = true;
                /*console.log('Loading...');*/
            }, 200);

            $scope.requestInProgress = true;
            $http.get('/api' + encodeURI(locationPath.replace(/\/(.*)\.php\//, '/')), { cache: false }).success(function(data) {
                /*console.log('API Request', '/api' + locationPath.replace(/\/(.*)\.php\//, '/'));*/

                  if(data.require_redirect && data.require_redirect == true) {
                    /*console.log('Page reload is required');*/
                    event.preventDefault();
                    $window.location.href = locationPath;
                }

                $scope.anyFilterChecked = function() {
                    var data,
                        removable;

                    for(var type in $scope.urlParamTypes) {
                        data = $scope.deepFind($scope.data, $scope.urlParamTypes[type].dataPath);
                        removable = $scope.urlParamTypes[type].dataRemovable;

                        if(removable)
                            for(var key in data)
                                return true;
                    }

                    return false;
                };

                $scope.showClearButton = function() {

                    var show = false;
                    $.each($scope.data.filters, function(key, value) {
                       if(typeof(value.checked_values_list) != 'undefined')
                       {
                           if(typeof(value.checked_values_list) == 'object' ) {

                                if(Object.getOwnPropertyNames(value.checked_values_list) != 'length')  show = true;

                           }
                           if(typeof(value.checked_values_list) == 'string' ) {
                               if(value.checked_values_list != '') show= true;
                           }
                       }
                    });

                    if($scope.isFilterChecked('premium', 1) || $scope.isFilterChecked('sale', 1)) show = true;

                    return show;
                };

                $scope.data = data;

                if(typeof($scope.data.filters.gender_categories) != 'undefined') {
                  if($scope.data.filters.gender_categories.checked_value == 0 && $scope.data.filters.gender_categories.list.length > 0) {
                    $scope.data.filters.subcategories = {};
                  }
                }

                $scope.labelVisible = [];

                $scope.order_types = [
                    {
                        key: 'n',
                        name: $scope.data.t.od_najnowszego
                    },
                    {
                        key: 'plh',
                        name: $scope.data.t.od_najnizszej_ceny
                    },
                    {
                        key: 'phl',
                        name: $scope.data.t.od_najwyzszej_ceny
                    },
                    {
                        key: 'sf',
                        name: $scope.data.t.od_przecenionych
                    }
                ];



                $scope.data.page = parseInt($scope.data.page);
                $scope.data.results = parseInt($scope.data.results);
                $scope.data.search = decodeURIComponent($scope.data.search);
                $scope.data.banner = $sce.trustAsHtml($scope.data.banner);



//                if($scope.data.title.length > 0)
//                    $rootScope.pageTitle = $scope.data.title;

                $scope.markMenuItemSelected();

                $scope.isSpecialLink = false;

                /**
                 * Wykrywanie, czy głównym filtrem jest marka
                 */
                var reg = new RegExp('^' + $scope.baseUrlPath + '[a-z0-9\.\_\-]+\-[0-9]+\-b', 'ig');
                if($location.path().search(reg) == 0) {
                    $scope.baseUrl = $scope.baseUrlPath + $scope.data.brand_name + '-' + $scope.data.brand_id + '-b.html';
                    $scope.baseDescription = $scope.data.brand_name;
                    $scope.isSpecialLink = true;
                }

                /**
                 * Wykrywanie, czy głównym filtrem jest kategoria
                 */
                var reg = new RegExp('^' + $scope.baseUrlPath + '[a-z0-9\_\-]+\-[0-9]+\-k', 'ig');
                if(locationPath.search(reg) == 0) {
                    $scope.baseUrl = $scope.baseUrlPath + $scope.data.category_name + '-' + $scope.data.category_id + '-k.html';
                    $scope.baseDescription = $scope.data.category_name;
                }

                /**
                 * Wykrywanie, czy głównym filtrem jest flaga "nowość"
                 */
                var newParam = ['nowosci', 'nowosci', 'http://answear.ua/scripts/angular_controllers/nowosci.html', 'novosti'];
                for(var i in newParam) {
                    var reg = new RegExp('^' + $scope.baseUrlPath + newParam[i], 'ig');
                    if(locationPath.search(reg) == 0) {

                        $scope.baseUrl = $scope.baseUrlPath + newParam[i];

                        if($scope.data.category_name && $scope.data.category_id) {
                            $scope.baseUrl += "/" + $scope.data.category_name + '-' + $scope.data.category_id + '-k.html';
                        }
                        $scope.baseDescription = '';
                        $scope.isSpecialLink = true;
                    }
                }

                /**
                 * Wykrywanie, czy głównym filtrem jest flaga "sale"
                 */
                var saleParam = ['promocje', 'http://answear.ua/scripts/angular_controllers/promocje.html', 'sale', 'outlet', 'http://answear.ua/scripts/angular_controllers/outlet.html','dziecko', 'rebenok'];

                for(var i in saleParam) {
                    var reg = new RegExp('^' + $scope.baseUrlPath + saleParam[i], 'ig');
                    if(locationPath.search(reg) == 0) {
                       $scope.baseUrl = $scope.baseUrlPath + saleParam[i];

                        if($scope.data.category_name && $scope.data.category_id) {
                            $scope.baseUrl += "/" + $scope.data.category_name + '-' + $scope.data.category_id + '-k';
                        }

                        $scope.baseUrl+='.html';

                        $scope.baseDescription = '';
                        $scope.isSpecialLink = true;

                    }
                }

                var specialParam = ['premium', 'special', 'specjalne', 'http://answear.ua/scripts/angular_controllers/specjalne.html'];
                for(var i in specialParam) {
                    var reg = new RegExp('^' + $scope.baseUrlPath + specialParam[i], 'ig');
                    if(locationPath.search(reg) == 0) {
                        $scope.baseUrl = $scope.baseUrlPath + specialParam[i] + "/" + $scope.data.pseudo_category + '.html';
                        $scope.baseDescription = '';
                        $scope.isSpecialLink = true;
                    }
                }
                /**
                 * Obsługa wyszukiwania
                 */
                var searchParam = ['wyszukiwanie', 'http://answear.ua/scripts/angular_controllers/wyszukiwanie.html', 'search', 'iskat'];
                for(var i in searchParam) {
                    var reg = new RegExp('^' + $scope.baseUrlPath + searchParam[i], 'ig');
                    if(locationPath.search(reg) == 0) {
                        $scope.baseUrl = $scope.baseUrlPath + searchParam[i]+'/q-'+ $scope.data.search;
                        $scope.baseDescription = '';
                        $scope.isSpecialLink = true;
                    }
                }

                $scope.seoInit = function() {

                    $('html head title').html($scope.data.meta_title);
                    $('html head meta[name=description]').attr('content', $scope.data.meta_description);
                    $('html head meta[name=keywords]').attr('content', $scope.data.meta_keywords);

                    $('html head meta[property="og:title"]').attr('content', $scope.data.meta_title);
                    $('html head meta[property="og:description"]').attr('content', $scope.data.meta_description);

                    var setHeadLink = function(rel, url){
                        var link = $('html head link[rel=' + rel + ']');

                        if(typeof(url) != 'undefined' && url.length){
                            if(!url.match(/^http/g)){
                                url = location.protocol+'//'+location.hostname + url;
                            }
                            if(link.length){
                                link.attr('href', url);
                            }else{
                                $('html head').append('<link rel="' + rel + '" href="'+ url +'">');
                            }
                        }else if(link.length){
                            link.remove();
                        }
                    }
                    setHeadLink('canonical', $scope.getCanonicalUrl());
                    setHeadLink('next', $scope.getNextPageUrl(data.total_pages));
                    setHeadLink('prev', $scope.getPrevPageUrl());
                };

                $scope.seoInit();

                if(data.require_refresh) {
                    /*console.log('Additional API Request is required');*/
                    $scope.changeUrl('p', 1, false, true);
                }

                if(data.require_redirect && data.require_redirect != true) {
                    if(data.require_redirect == '/') {
                        $window.location.href = 'http://answear.ua/';
                    } else {
                        $scope.changeUrl('k', data.require_redirect, false, true);
                    }

                    return false;
                }

                $scope.langSwitchReset = function() {
                    $('#langSwitch').removeClass('active');
                    $('#langSwitchList').hide();
                };

                $scope.langSwitchReset();
                
                TopBanners.cookieInitAndReset();
                
                Newsletter.initAndReset();
                
                $scope.isViewLoading = false;
                $scope.requestInProgress = false;


                $scope.initPriceSlider();

                $scope.allTrackingCodes();

                $timeout.cancel($scope.loadingTimeout);
                
                $scope.initSeo();
                $scope.initGTM();
                
                $('.es-full-text-search div.es-filter-input').removeClass('es-show-loading');

                $anchorScroll();
            }).error(function(data) {

                $scope.isViewLoading = false;
                $scope.requestInProgress = false;
                $scope.errorLoading = true;

                $timeout.cancel($scope.loadingTimeout);
                $('.es-full-text-search div.es-filter-input').removeClass('es-show-loading');

                $anchorScroll();
            });

        }

    });

});

/** ustawia parametry dla grida produktow w widoku kategorii */
ProductFilteredListApp.directive('productListImageLoaded', function() {
    return {
        restrict: 'A',
        link: function(scope, element, attrs) {
            /**
             * jQuery
             */

            element.bind('load', function() {
                var innerBlock = $(element).parents('.inner');

                innerBlock.css({height: innerBlock.outerHeight()});
                innerBlock.addClass('set');
            });
        }
    };
});

/** slider cenowy musi być dyrektywą, bo wymaga załadowanego elementu  */
ProductFilteredListApp.directive('priceRange', function() {
    return {
        restrict: 'A',
        link: function(scope, element, attrs) {
            scope.initPriceSlider();
        }
    };
});


ProductFilteredListApp.directive('filterBrandList', function () {
    return {
        restrict: 'A',
        link: function (scope, element, attrs) {
            element.bind('keyup', function () {
                var queryValue = $(element).val().toLowerCase();

                var filterList = $(element).parents('div.filtersBox').find('ul');
                $(filterList).children().each(function () {
                    if (queryValue == '') {
                        $(this).show();
                    } else {

                        var elValue = $(this).text().trim().toLowerCase();

                        if (elValue.substr(0, queryValue.length) !== queryValue) {
                            $(this).hide();
                        } else {
                            $(this).show();
                        }
                    }

                });
            });
        }
    }
});

ProductFilteredListApp.directive('loadedElement', function () {
    return {
        restrict: 'A',
        link: function (scope, element, attrs) {
            element.load(function() {
                element.parents('.thumb').addClass('hover');
            });

            isMobile = false;
            if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Opera Mobile|Kindle|Windows Phone|PSP|AvantGo|Atomic Web Browser|Blazer|Chrome Mobile|Dolphin|Dolfin|Doris|GO Browser|Jasmine|MicroB|Mobile Firefox|Mobile Safari|Mobile Silk|Motorola Internet Browser|NetFront|NineSky|Nokia Web Browser|Obigo|Openwave Mobile Browser|Palm Pre web browser|Polaris|PS Vita browser|Puffin|QQbrowser|SEMC Browser|Skyfire|Tear|TeaShark|UC Browser|uZard Web|wOSBrowser|Yandex.Browser mobile/i.test(navigator.userAgent)) isMobile = true;

            if(!isMobile) {
                element.parents('.item').addClass('desktop');
            }

        }
    }
});

ProductFilteredListApp.directive('brandSlider', function($timeout) {
   return {
        restrict: 'A',
        link: function(scope, element, attrs) {
            $timeout(function(){
                $(element).lemmonSlider({
                    infinite: true                    
                });
                $(element).animate({
                    opacity: 1
                }, 200);
            }, 750);
        }
    };        
});

ProductFilteredListApp.filter('currency', function () {
    return function(value, symbol, decimalPoints) {
        var price = parseFloat(value).toFixed(decimalPoints) ;
        return symbol + ' ' + price.replace('.', ',');
    };
});


ProductFilteredListApp.filter('format_filter_prices', function () {
    return function(value, currency) {

        var split = value.split(",");
       return split[0] + " " + currency + " - " + split[1] + " " + currency;
    };
});

ProductFilteredListApp.filter('format_price', function () {
    return function(value) {
        return priceFormat(value);
    };
});

ProductFilteredListApp.directive('ngEnter', function () {
    return function (scope, element, attrs) {
        element.bind("keydown keypress", function (event) {
            if(event.which === 13) {
                scope.$apply(function (){
                    scope.$eval(attrs.ngEnter);
                    element.blur();
                });
                event.preventDefault();
            }
        });
    };
});

/**
 * Podmiana pasków przewijania w filtrach - tymczasowo wylaczona, wlaczone paski systemowe.
 */
//ProductFilteredListApp.directive('esScroll', function() {
//    return {
//        restrict: 'A',
//        link: function(scope, element, attrs) {
//            scope.$evalAsync(function() {
//                $(element).perfectScrollbar({
//                    includePadding: true,
//                    suppressScrollX: true,
//                    minScrollbarLength: 40
//                });
//            });
//        }
//    }
//});
